
# -*- coding: utf-8 -*-
"""
Created on Wed May 16 10:27:58 2018

@author: test
"""

import clr
import sys
#from SafetyMech import *
#from OffsetUtilities import *
#from Instruments.FunctionGenerator_33500B import Agilent_FG_33500B
import csv
import time
import datetime
import openpyxl 
#from temp import printfunction
#from scripts.pyAuxiliary_functions import *
                                    #import scripts.pruthvi_HAVA1_dict_def as HAVA1
#from NS_oven import OVEN_TEMP
                                        # OVEN_TEMP function takes 3 arguements. target_temp,soaktime,temptol
                                        # soak_time in seconds, temptol=1
                                        # Add InvenTest DLLs to Python search path.
from excel_modf import excel_modf
from plot_chart import scatchart

########### Startup Routine ###################
path1 = 'C:/InvenTest/MathLib/bin/x86/Debug'
path2 = 'C:/InvenTest/ScriptInterfaceLib/bin/x86/Debug'
sys.path.append(path1)
sys.path.append(path2)
# Load essential DLLs
clr.AddReference('ScriptInterfaceLib')
from ScriptInterfaceLib import *
clr.AddReference('MathLib')
clr.AddReference('NILib')
clr.AddReference('TestHardwareLib')
clr.AddReference('AeroTech502000')
clr.AddReference('ConfigManagerLib')
clr.AddReference('ProductionFlow')
clr.AddReference('TestProcedureLib')
clr.AddReference('ScriptLib')
clr.AddReference('ResultWriterLib')
#File generated by InvenTest GUI run and normally found in "c:\temp"
configFileName = 'C:/temp/OptionCS_Inventest.txt'
api = API.GetInstance(configFileName)
#print(api)
continuity = api.RunRoutine("check","continuity","2047","2047","2047").IntArray[0]
print("Continuity:", continuity)
#switching on device using inventest script @ 3.3V
api.RunScript('YOK_Val_SensorSettlingTimes_overVDC_v1.1_powerON.ini')
print("Power On")

################## END startup routine ####################

gxfromoff= []
gyfromoff= []
gzfromoff= []
axfromoff= []
ayfromoff= []
azfromoff= []

gxfromsleep = []
gyfromsleep = []
gzfromsleep = []
axfromsleep = []
ayfromsleep = []
azfromsleep = []

gxfromstandby= []
gyfromstandby= []
gzfromstandby= []
axfromstandby= []
ayfromstandby= []
azfromstandby= []

gxfromsoftreset= []
gyfromsoftreset= []
gzfromsoftreset= []
axfromsoftreset= []
ayfromsoftreset= []
azfromsoftreset= []

#gxfromcondreset= []
#gyfromcondreset= []
#gzfromcondreset= []
gxfromgyrodisable= []
gyfromgyrodisable= []
gzfromgyrodisable= []
axfromgyrodisable= []
ayfromgyrodisable= []
azfromgyrodisable= []

gxfromacceldisable= []
gyfromacceldisable= []
gzfromacceldisable= []
axfromacceldisable= []
ayfromacceldisable= []
azfromacceldisable= []
   
   

#init_list()
#User variable 
#target = [-40,25,85]
#soak = 150
#tol= 2

######################User inputs##############################
vdd = [1.71,1.8]
vddio = [1.71,1.8]
samples = 3
file = "raw_data4.xlsx"    # Contains raw data 
file1 = "results_7pm.xlsx"   # contains the summary table
Upper_Limit = 200
Lower_Limit = 0

######################END_User inputs##############################

#open workbook
from openpyxl import Workbook
wb = Workbook()

sheet = wb.active

#sets the temperature 
#for x in range(len(target)):
#    OVEN_TEMP(target[x])    
#    time.sleep(1000) # confirmed that I dont neew to wait  after the fucntion call because function takes care of the 
    
    #sets the VDD and VDDIO voltage
for y in range(len(vdd)):
    vdd_v = vdd[y]
    vddio_v = vddio[y]
    vdd_v_str = str(vdd_v)
    vddio_v_str = str(vddio_v)
    api.RunRoutine('set','vdd',vdd_v_str).IntArray
    api.RunRoutine('set','vddio',vddio_v_str).IntArray
#repeat nunber of times the routine is run
        
    for count in range(0,samples):
         
        api.RunRoutine('set','serialmode','I2C').IntArray
        api.RunRoutine('check','comm','170').IntArray
        
        gxstartuptimefromoff = api.RunRoutine('check','gxstartuptimefromoff').DoubleArray
        gystartuptimefromoff = api.RunRoutine('check','gystartuptime').DoubleArray
        gzstartuptimefromoff = api.RunRoutine('check','gzstartuptime').DoubleArray
        #api.RunRoutine('set','serialmode','I2C').IntArray
        #api.RunRoutine('set','vdd','1.8').IntArray
        #api.RunRoutine('set','vddio','1.8').IntArray
        axstartuptimefromoff = api.RunRoutine('check','axstartuptime').DoubleArray
        aystartuptimefromoff = api.RunRoutine('check','aystartuptime').DoubleArray
        azstartuptimefromoff = api.RunRoutine('check','azstartuptime').DoubleArray
        
        api.RunRoutine('set','serialmode','I2C').IntArray
        api.RunRoutine('check','comm','170').IntArray
        
        gxstartuptimefromsleep = api.RunRoutine('check','gxstartuptimefromsleep').DoubleArray
        gystartuptimefromsleep = api.RunRoutine('check','gystartuptime').DoubleArray
        gzstartuptimefromsleep = api.RunRoutine('check','gzstartuptime').DoubleArray
        axstartuptimefromsleep = api.RunRoutine('check','axstartuptime').DoubleArray
        aystartuptimefromsleep = api.RunRoutine('check','aystartuptime').DoubleArray
        azstartuptimefromsleep = api.RunRoutine('check','azstartuptime').DoubleArray
            
        gxstartuptimefromgyrostandby = api.RunRoutine('check','gxstartuptimefromgyrostandby').DoubleArray
        gystartuptimefromgyrostandby = api.RunRoutine('check','gystartuptime').DoubleArray
        gzstartuptimefromgyrostandby = api.RunRoutine('check','gzstartuptime').DoubleArray
        axstartuptimefromgyrostandby = api.RunRoutine('check','axstartuptime').DoubleArray
        aystartuptimefromgyrostandby = api.RunRoutine('check','aystartuptime').DoubleArray
        azstartuptimefromgyrostandby = api.RunRoutine('check','azstartuptime').DoubleArray
        
        
        gxstartuptimefromsoftreset = api.RunRoutine('check','gxstartuptimefromsoftreset').DoubleArray
        gystartuptimefromsoftreset = api.RunRoutine('check','gystartuptime').DoubleArray
        gzstartuptimefromsoftreset = api.RunRoutine('check','gzstartuptime').DoubleArray
        axstartuptimefromsoftreset = api.RunRoutine('check','axstartuptime').DoubleArray
        aystartuptimefromsoftreset = api.RunRoutine('check','aystartuptime').DoubleArray
        azstartuptimefromsoftreset = api.RunRoutine('check','azstartuptime').DoubleArray
        
    #    gxstartuptimefromsigcondreset = api.RunRoutine('check','gxstartuptimefromsigcondreset').DoubleArray
    #    gystartuptimefromsigcondreset = api.RunRoutine('check','gystartuptime').DoubleArray
    #    gzstartuptimefromsigcondreset = api.RunRoutine('check','gzstartuptime').DoubleArray
        
        gxstartuptimefromgyrodisable = api.RunRoutine('check','gxstartuptimefromgyrodisable').DoubleArray
        gystartuptimefromgyrodisable = api.RunRoutine('check','gystartuptime').DoubleArray
        gzstartuptimefromgyrodisable = api.RunRoutine('check','gzstartuptime').DoubleArray
        axstartuptimefromgyrodisable = api.RunRoutine('check','axstartuptime').DoubleArray
        aystartuptimefromgyrodisable = api.RunRoutine('check','aystartuptime').DoubleArray
        azstartuptimefromgyrodisable = api.RunRoutine('check','azstartuptime').DoubleArray
        
        
        gxstartuptimefromacceldisable = api.RunRoutine('check','gxstartuptimefromacceldisable').DoubleArray
        gystartuptimefromacceldisable = api.RunRoutine('check','gystartuptime').DoubleArray
        gzstartuptimefromacceldisable = api.RunRoutine('check','gzstartuptime').DoubleArray
        axstartuptimefromacceldisable = api.RunRoutine('check','axstartuptime').DoubleArray
        aystartuptimefromacceldisable = api.RunRoutine('check','aystartuptime').DoubleArray
        azstartuptimefromacceldisable = api.RunRoutine('check','azstartuptime').DoubleArray
        
        #to convert to array
        for i in range(0,len(axstartuptimefromoff)):
            gxfromoff.append(gxstartuptimefromoff[i])
            gyfromoff.append(gystartuptimefromoff [i])
            gzfromoff.append(gzstartuptimefromoff [i])
            axfromoff.append(axstartuptimefromoff[i])
            ayfromoff.append(aystartuptimefromoff [i])
            azfromoff.append(azstartuptimefromoff [i])
            
            gxfromsleep.append(gxstartuptimefromsleep [i])
            gyfromsleep.append( gystartuptimefromsleep[i])
            gzfromsleep.append( gzstartuptimefromsleep[i])
            axfromsleep.append(axstartuptimefromsleep [i])
            ayfromsleep.append(aystartuptimefromsleep[i])
            azfromsleep.append(azstartuptimefromsleep[i])
            
            gxfromstandby.append(gxstartuptimefromgyrostandby [i])
            gyfromstandby.append(gystartuptimefromgyrostandby [i])
            gzfromstandby.append(gzstartuptimefromgyrostandby [i])
            axfromstandby.append(axstartuptimefromgyrostandby [i])
            ayfromstandby.append(aystartuptimefromgyrostandby [i])
            azfromstandby.append(azstartuptimefromgyrostandby [i])
            
            gxfromsoftreset.append(gxstartuptimefromsoftreset [i])
            gyfromsoftreset.append(gystartuptimefromsoftreset [i])
            gzfromsoftreset.append(gzstartuptimefromsoftreset [i])
            axfromsoftreset.append(axstartuptimefromsoftreset [i])
            ayfromsoftreset.append(aystartuptimefromsoftreset [i])
            azfromsoftreset.append(azstartuptimefromsoftreset [i])
            
    #        gxfromcondreset.append(gxstartuptimefromsigcondreset [i])
    #        gyfromcondreset.append(gystartuptimefromsigcondreset [i])
    #        gzfromcondreset.append(gzstartuptimefromsigcondreset [i])
            gxfromgyrodisable.append(gxstartuptimefromgyrodisable [i])
            gyfromgyrodisable.append(gystartuptimefromgyrodisable [i])
            gzfromgyrodisable.append(gzstartuptimefromgyrodisable [i])
            axfromgyrodisable.append(axstartuptimefromgyrodisable [i])
            ayfromgyrodisable.append(aystartuptimefromgyrodisable [i])
            azfromgyrodisable.append(azstartuptimefromgyrodisable [i])
            
            gxfromacceldisable.append(gxstartuptimefromacceldisable [i])
            gyfromacceldisable.append(gystartuptimefromacceldisable [i])
            gzfromacceldisable.append(gzstartuptimefromacceldisable [i])
            axfromacceldisable.append(axstartuptimefromacceldisable [i])
            ayfromacceldisable.append(aystartuptimefromacceldisable [i])
            azfromacceldisable.append(azstartuptimefromacceldisable [i])
##    print(gxfromoff)  
##    print(gyfromoff)
##    print(gzfromoff)
#    print(axfromoff)
#    print(ayfromoff)
#    print(azfromoff)
      
    sheet.append(gxfromoff)
    sheet.append(gyfromoff)
    sheet.append(gzfromoff)
    sheet.append(axfromoff)
    sheet.append(ayfromoff)
    sheet.append(azfromoff)
    
    sheet.append(gxfromsleep)
    sheet.append(gyfromsleep)
    sheet.append(gzfromsleep)
    sheet.append(axfromsleep)
    sheet.append(ayfromsleep)
    sheet.append(azfromsleep)
    
    sheet.append(gxfromstandby)
    sheet.append(gyfromstandby)
    sheet.append(gzfromstandby)
    sheet.append(axfromstandby)
    sheet.append(ayfromstandby)
    sheet.append(azfromstandby)
    
    sheet.append(gxfromsoftreset)
    sheet.append(gyfromsoftreset)
    sheet.append(gzfromsoftreset)
    sheet.append(axfromsoftreset)
    sheet.append(ayfromsoftreset)
    sheet.append(azfromsoftreset)
    
    #sheet.append(gxfromcondreset)
    #sheet.append(gyfromcondreset)
    #sheet.append(gzfromcondreset)
    
    sheet.append(gxfromgyrodisable)
    sheet.append(gyfromgyrodisable)
    sheet.append(gzfromgyrodisable)
    sheet.append(axfromgyrodisable)
    sheet.append(ayfromgyrodisable)
    sheet.append(azfromgyrodisable)
    
    sheet.append(gxfromacceldisable)
    sheet.append(gyfromacceldisable)
    sheet.append(gzfromacceldisable)
    sheet.append(axfromacceldisable)
    sheet.append(ayfromacceldisable)
    sheet.append(azfromacceldisable)
    
    wb.save(file)
    
    gxfromoff= []
    gyfromoff= []
    gzfromoff= []
    axfromoff= []
    ayfromoff= []
    azfromoff= []
    
    gxfromsleep = []
    gyfromsleep = []
    gzfromsleep = []
    axfromsleep = []
    ayfromsleep = []
    azfromsleep = []
    
    gxfromstandby= []
    gyfromstandby= []
    gzfromstandby= []
    axfromstandby= []
    ayfromstandby= []
    azfromstandby= []
    
    gxfromsoftreset= []
    gyfromsoftreset= []
    gzfromsoftreset= []
    axfromsoftreset= []
    ayfromsoftreset= []
    azfromsoftreset= []
#    gxfromcondreset= []
#    gyfromcondreset= []
#    gzfromcondreset= []
    gxfromgyrodisable= []
    gyfromgyrodisable= []
    gzfromgyrodisable= []
    axfromgyrodisable= []
    ayfromgyrodisable= []
    azfromgyrodisable= []
    
    gxfromacceldisable= []
    gyfromacceldisable= []
    gzfromacceldisable= []
    axfromacceldisable= []
    ayfromacceldisable= []
    azfromacceldisable= []
VDD = len(vdd)
excel_modf(file,file1,Upper_Limit,Lower_Limit,vdd)

scatchart(file1,vdd)
#        for j in range (0,12):
#        print ("Gxskt"+str(j) +'=' + str(result1[j]))
#        print ("Gyskt"+str(j) +'=' + str(result2[j]))
#        print ("Gzskt"+str(j) +'=' + str(result3[j]))


#Read_and_Print_Offsets_Function(api)

#filter out the data 

    
    
    