
# -*- coding: utf-8 -*-
"""
Created on Wed May 16 10:27:58 2018

@author: test
"""

import clr
import sys
#from SafetyMech import *
#from OffsetUtilities import *
#from Instruments.FunctionGenerator_33500B import Agilent_FG_33500B
import csv
import time
import datetime
import openpyxl 
#from temp import printfunction
#from scripts.pyAuxiliary_functions import *
                                    #import scripts.pruthvi_HAVA1_dict_def as HAVA1
#from NS_oven import OVEN_TEMP
                                        # OVEN_TEMP function takes 3 arguements. target_temp,soaktime,temptol
                                        # soak_time in seconds, temptol=1
                                        # Add InvenTest DLLs to Python search path.
from YOK_excel_modf_reg_otp_read_write import excel_modf
#from plot_chart import scatchart
from YOK_plot_chart_reg_otp_read_write import scatchart
########### Startup Routine ###################
path1 = 'C:/InvenTest/MathLib/bin/x86/Debug'
path2 = 'C:/InvenTest/ScriptInterfaceLib/bin/x86/Debug'
sys.path.append(path1)
sys.path.append(path2)
# Load essential DLLs
clr.AddReference('ScriptInterfaceLib')
from ScriptInterfaceLib import *
clr.AddReference('MathLib')
clr.AddReference('NILib')
clr.AddReference('TestHardwareLib')
clr.AddReference('AeroTech502000')
clr.AddReference('ConfigManagerLib')
clr.AddReference('ProductionFlow')
clr.AddReference('TestProcedureLib')
clr.AddReference('ScriptLib')
clr.AddReference('ResultWriterLib')
#File generated by InvenTest GUI run and normally found in "c:\temp"
configFileName = 'C:/temp/OptionCS_Inventest.txt'
api = API.GetInstance(configFileName)
#print(api)
continuity = api.RunRoutine("check","continuity","2047","2047","2047").IntArray[0]
print("Continuity:", continuity)
#switching on device using inventest script @ 3.3V
api.RunScript('YOK_Val_SensorSettlingTimes_overVDC_v1.1_powerON.ini')
print("Power On")

################## END startup routine ####################

otpreadfrompowercycle = []

regreadfromsleep = []
regwritefromsleep = []

regreadfromgyrodisable = []
regwritefromgyrodisable= []

regreadfromacceldisable = []
regwritefromacceldisable = []

regreadfrompowercycle = [] ##need extrea power on 
regwritefrompowercycle = [] # need extra power ON

#init_list()
#User variable 
#target = [-40,25,85]
#soak = 150
#tol= 2

######################User inputs##############################
vdd = [1.71,1.8]
vddio = [1.71,1.8]
samples = 1
file = "raw_data5.xlsx"    # Contains raw data 
file1 = "results_8pm.xlsx"   # contains the summary table
Upper_Limit = 200
Lower_Limit = 0

######################END_User inputs##############################

#open workbook
from openpyxl import Workbook
wb = Workbook()

sheet = wb.active

#sets the temperature 
#for x in range(len(target)):
#    OVEN_TEMP(target[x])    
#    time.sleep(1000) # confirmed that I dont neew to wait  after the fucntion call because function takes care of the 
    
    #sets the VDD and VDDIO voltage
for y in range(len(vdd)):
    vdd_v = vdd[y]
    vddio_v = vddio[y]
    vdd_v_str = str(vdd_v)
    vddio_v_str = str(vddio_v)
    api.RunRoutine('set','vdd',vdd_v_str).IntArray
    api.RunRoutine('set','vddio',vddio_v_str).IntArray
#repeat nunber of times the routine is run
        
    for count in range(0,samples):
         
        api.RunRoutine('set','serialmode','I2C').IntArray
        api.RunRoutine('check','comm','170').IntArray
        
        regreadtimefromsleep = api.RunRoutine('check','regreadtimefromsleep','66').DoubleArray
        regwritetimefromsleep = api.RunRoutine('check','regwritetimefromsleep').DoubleArray
        regreadtimefromgyrodisable = api.RunRoutine('check','regreadtimefromgyrodisable','66').DoubleArray
        regwritetimefromgyrodisable = api.RunRoutine('check','regwritetimefromgyrodisable').DoubleArray
        regreadtimefromacceldisable = api.RunRoutine('check','regreadtimefromacceldisable','66').DoubleArray
        regwritetimefromacceldisable = api.RunRoutine('check','regwritetimefromacceldisable').DoubleArray
        
#        api.RunRoutine('set','serialmode','I2C').IntArray
#        api.RunRoutine('check','comm','170').IntArray
        
        otpreadtimefrompowercycle = api.RunRoutine('check','otpreadtimefrompowercycle','66').DoubleArray
        regreadtimefrompowercycle = api.RunRoutine('check','regreadtimefrompowercycle','66').DoubleArray
        regwritetimefrompowercycle = api.RunRoutine('check','regwritetimefrompowercycle').DoubleArray

        #to convert to array
        for i in range(0,len(regreadtimefromsleep)):
            regreadfromsleep.append(regreadtimefromsleep[i])
            regwritefromsleep.append(regwritetimefromsleep [i])
            regreadfromgyrodisable.append(regreadtimefromgyrodisable [i])
            regwritefromgyrodisable.append(regwritetimefromgyrodisable[i])
            regreadfromacceldisable.append(regreadtimefromacceldisable [i])
            regwritefromacceldisable.append(regwritetimefromacceldisable [i])
            
            otpreadfrompowercycle.append(otpreadtimefrompowercycle [i])
            regreadfrompowercycle.append(regreadtimefrompowercycle[i])
            regwritefrompowercycle.append(regwritetimefrompowercycle[i])

      
    sheet.append(regreadfromsleep)
    sheet.append(regwritefromsleep)
    sheet.append(regreadfromgyrodisable)
    sheet.append(regwritefromgyrodisable)
    sheet.append(regreadfromacceldisable)
    sheet.append(regwritefromacceldisable)
    sheet.append(otpreadfrompowercycle)
    sheet.append(regreadfrompowercycle)
    sheet.append(regwritefrompowercycle)

    wb.save(file)
    
    otpreadfrompowercycle = []

    regreadfromsleep = []
    regwritefromsleep = []
    
    regreadfromgyrodisable = []
    regwritefromgyrodisable= []
    
    regreadfromacceldisable = []
    regwritefromacceldisable = []
    
    regreadfrompowercycle = [] ##need extrea power on 
    regwritefrompowercycle = [] # need extra power ON
   
VDD = len(vdd)
excel_modf(file,file1,Upper_Limit,Lower_Limit,vdd)


scatchart(file1,vdd)
#        for j in range (0,12):
#        print ("Gxskt"+str(j) +'=' + str(result1[j]))
#        print ("Gyskt"+str(j) +'=' + str(result2[j]))
#        print ("Gzskt"+str(j) +'=' + str(result3[j]))


#Read_and_Print_Offsets_Function(api)

#filter out the data 

    
    
    